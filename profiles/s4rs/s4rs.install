<?php
/**
 * @file
 * Main installation logic for Solar 4R Schools.
 */

!function_exists('profiler_v2') ? require_once 'libraries/profiler/profiler.inc' : FALSE;
profiler_v2('s4rs');

/**
 * Implements hook_install_tasks_alter().
 */
function s4rs_install_tasks_alter(&$tasks) {
  $tasks['s4rs_install_profile_complete'] = array();
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function s4rs_install() {
  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();

  // Set theme.
  $config = profiler_v2_load_config('s4rs');
  $theme_name = $config['theme'];
  variable_set('theme_default', $theme_name);
  theme_enable(array($theme_name, 'kiosk'));

  // Default blocks.
  $blocks = array(
    // Content.
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $theme_name,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'title' => '<none>',
    ),
  );
  $fields = array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
    'title',
  );
  // Perform merge query since block table may already be populated.
  foreach ($blocks as $block) {
    $query = db_merge('block')
      ->key(
        array(
          'module' => $block['module'],
          'delta' => $block['delta'],
          'theme' => $block['theme'],
        )
      )
      ->fields(array_combine($fields, $block));
    $query->execute();
  }
}

/**
 * Tasks to run at the end of the installation process.
 */
function s4rs_install_profile_complete() {
  require_once __DIR__ . '/s4rs.install.inc';
  // Slideshow starters.
  _s4rs_install_placeholder_images();

  // Init magic.
  s4rs_init_magic();

  // Add menus.
  _s4rs_install_menu_items();

  // Add the feed for 'wiki' articles.
  _s4rs_install_feeds();

  // Enable automatic taxonomy menu.
  _s4rs_taxonomy_menu();

  // Add some custom entities.
  _s4rs_install_entities();

  // Add default tooltip help text.
  _s4rs_install_tooltip_help();

  // Delete undesired autogenerated og_user_node1 field on user page.
  $instance = field_info_instance('user', 'og_user_node1', 'user');
  field_delete_instance($instance);
}

/**
 * Set us as the default install profile, remove defaults and OpenSourcery.
 */
function system_form_install_select_profile_form_alter(&$form, $form_state) {
  unset($form['profile']['Minimal'], $form['profile']['Standard'], $form['profile']['OpenSourcery']);
  foreach ($form['profile'] as $key => $element) {
    $form['profile'][$key]['#value'] = 's4rs';
  }
}

/**
 * Implements of hook_form_FORM_ID_alter().
 *
 * Set defaults on "Configure site" form during installation.
 */
function s4rs_form_install_configure_form_alter(&$form, $form_state) {
  $server_name = $_SERVER['SERVER_NAME'];

  // Pre-populate the site name with the server name.
  $form['site_information']['site_name']['#default_value']    = $server_name;
}

/**
 * Revert homepage layout and maps.
 */
function s4rs_update_7001() {
  features_revert(array(
    'solar_homepage' => array('page_manager_pages'),
    'solar_maps' => array(),
  ));
}

/**
 * Add the 'Educational impact data' term to vocab Widget types.
 */
function s4rs_update_7002() {
  $entity_type = 'equivalencies_statistics';

  $term = new stdClass();
  $term->vid = 2;
  $term->name = 'Educational impact data';
  taxonomy_term_save($term);

  $entities[] = array(
    'title' => 'Number of classrooms reached',
    'field_calculation_source2' => array(
      0 => array(
        'label' => array(
          'value' => 'classrooms',
          'format' => 'plain_text',
        ),
        'source' => 'field_classrooms_reached',
        'equation' => '',
      ),
    ),
    'field_equivalency_icon' => 'classrooms.gif',
    'field_widget_categories' => array($term->tid),
  );

  foreach ($entities as $values) {
    $entity = entity_create($entity_type, array('type' => $entity_type));
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $wrapper->title->set($values['title']);
    $wrapper->field_calculation_source2->set($values['field_calculation_source2']);
    $file = current(file_load_multiple(array(), array('uri' => 'public://' . $values['field_equivalency_icon'])));
    $wrapper->field_equivalency_icon->set(array('fid' => $file->fid));
    $wrapper->field_widget_categories->set($values['field_widget_categories']);
    $wrapper->save();
  }

  features_revert(array(
    'solar_projects' => array('field_base', 'field_instance', 'variable'),
  ));

  // Add the new field to all projects with a classroom number assigned.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'project')
  ->fieldCondition('field_classrooms_reached', 'value', 0, '>');

  $result = $query->execute();

  foreach ($result['node'] as $nid => $values) {
    $project = node_load($nid);
    $project->field_show_realtime[LANGUAGE_NONE][] = array('target_id' => $entity->id);
    node_save($project);
  }
}

/**
 * Enable javascript to warn of navigating away from page to entityforms.
 */
function s4rs_update_7003() {
  module_enable(array('edit_protection'));
}

/**
 * Adding chosen to all multiselects.
 */
function s4rs_update_7004() {
  variable_set('chosen_minimum_multiple', 0);
}

/**
 * Set user 1 to have every role.
 */
function s4rs_update_7005() {
  $roles = array(
    'educator',
    'site editor',
    'administrator',
    'teacher champion',
    'wiki editor',
  );
  foreach ($roles as $role_name) {
    $role = user_role_load_by_name($role_name);
    user_multiple_role_edit(array(1), 'add_role', $role->rid);
  }
}

/**
 * Remove the field_grade_level (list) field for field_grade_levels (terms).
 */
function s4rs_update_7006() {
  $fields_to_delete = array(
    'field_grade_level',
  );
  foreach ($fields_to_delete as $field_name) {
    field_delete_field($field_name);
    watchdog('feature_projects', 'Deleted the :field_name field from all content type instances.', array(':field_name' => $field_name));
  }
  field_purge_batch(1);
}

/**
 * Disable the core Overlay module as it does not agree with the Navbar module.
 */
function s4rs_update_7007() {
  module_disable(array('overlay'));
}

/**
 * Update applications for new fields.
 */
function s4rs_update_7008() {
  module_enable(array('markup'));

  features_revert(array(
    'solar_applications' => array('field_base', 'field_instance'),
  ));

  $fields_to_delete = array(
    'field_site_name',
  );
  foreach ($fields_to_delete as $field_name) {
    field_delete_field($field_name);
    watchdog('feature_projects', 'Deleted the :field_name field from all content type instances.', array(':field_name' => $field_name));
  }
  field_purge_batch(1);
}

/**
 * Update the fields in power one.
 */
function s4rs_update_7009() {
  features_revert(array(
    'power_one' => array('field_base', 'field_instance', 'page_manager_pages'),
  ));
}

/**
 * Set superfish to not use touchscreen js.
 */
function s4rs_update_7010() {
  variable_set('superfish_slp', 'profiles/s4rs/libraries/superfish/jquery.hoverIntent.minified.js
profiles/s4rs/libraries/superfish/jquery.bgiframe.min.js
profiles/s4rs/libraries/superfish/superfish.js
profiles/s4rs/libraries/superfish/supersubs.js
profiles/s4rs/libraries/superfish/supposition.js
profiles/s4rs/libraries/superfish/sfsmallscreen.js');
}

/**
 * Update vimeo preview image settings.
 */
function s4rs_update_7011() {
  features_revert(array(
    'solar_core' => array('file_entity'),
  ));
}

/**
 * Make endorsements, first, and last names not be required and add orgnization.
 */
function s4rs_update_7012() {
  $instance = field_read_instance('field_collection_item', 'field_nice_quote', 'field_endorsement');
  $instance['required'] = 0;
  field_update_instance($instance);

  $instance = field_read_instance('user', 'field_first_name', 'user');
  $instance['required'] = 0;
  field_update_instance($instance);

  $instance = field_read_instance('user', 'field_last_name', 'user');
  $instance['required'] = 0;
  field_update_instance($instance);

  features_revert(array(
    'solar_core' => array(
      'field_base',
      'field_instance',
      'user_permission',
      'variable',
    ),
  ));

  variable_set('realname_pattern', '[user:field-first-name] [user:field-last-name] [user:field-organization]');
}

/**
 * Allow menu items to be openable in a new tab.
 */
function s4rs_update_7013() {
  module_enable(array('menu_attributes'));
}

/**
 * Add default values to kiosk fields.
 */
function s4rs_update_7014() {
  features_revert(array(
    'solar_kiosk' => array('field_instance'),
  ));
}

/**
 * Re-set the proper paths for basic pages urls.
 */
function s4rs_update_7016() {
  variable_set('pathauto_node_page_pattern', '[node:menu-link:parent:title]/[node:title]');
}

/**
 * Set titles of search windows and inputs to match comps; Fixing titles.
 */
function s4rs_update_7017() {
  module_enable(array('views_exposed_groups'));

  features_revert(array(
    'solar_projects' => array('context'),
    'solar_search' => array('views_view'),
    'solar_activities' => array('page_manager_handlers'),
  ));
}

/**
 * Remove extra menu links for empty terms.
 */
function s4rs_update_7018() {
  // Get all links for the taxonomy_field_menu.
  db_delete('menu_links')
    ->condition('menu_name', 'menu-field-articles-category')
    ->condition('router_path', 'taxonomy/term/%')
    ->condition('has_children', 0)
    ->execute();

  db_delete('taxonomy_term_data')
    ->condition('vid', 0)
    ->execute();
}

/**
 * Remove titles from menu blocks.
 */
function s4rs_update_7019() {
  db_update('block')
    ->fields(array(
      'title' => '<none>',
    ))
    ->condition('theme', 'flare')
    ->condition(db_or()
      ->condition(
        db_and()->condition('module', 'menu')->condition('delta', 'menu-quick-links')
      )
      ->condition(
        db_and()->condition('module', 'menu')->condition('delta', 'menu-footer-menu')
      )
      ->condition(
        db_and()->condition('module', 'superfish')->condition('delta', '1')
      )
      ->condition(
        db_and()->condition('module', 'system')->condition('delta', 'user-menu')
      )
    )
    ->execute();

  db_update('block')
    ->fields(array(
      'title' => 'Find Us',
    ))
    ->condition('theme', 'flare')
    ->condition('module', 'solar_core')
    ->condition('delta', 'facebook')
    ->execute();

  db_update('block')
    ->fields(array(
      'title' => 'Graph Window',
    ))
    ->condition('theme', 'flare')
    ->condition('module', 'explore_data')
    ->condition('delta', 'explore_data_form')
    ->execute();

  db_update('block')
    ->fields(array(
      'title' => 'Search Menu',
    ))
    ->condition('theme', 'flare')
    ->condition('module', 'views')
    ->condition('delta', '092f0b2a8ab9c7c34d5f07ecdfeb7271')
    ->execute();

  db_update('block')
    ->fields(array(
      'title' => 'Search Window',
    ))
    ->condition('theme', 'flare')
    ->condition('module', 'views')
    ->condition('delta', [
      '-exp-node_search-panel_pane_1',
      '-exp-node_search-panel_pane_3',
      '-exp-node_search-panel_pane_7',
      '920a216bab2878c242538bc079fc8f1c',
    ], 'IN')
    ->execute();
}

/**
 * Add permissions for anonymous users to view video gallery fields.
 */
function s4rs_update_7020(&$sandbox) {
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'view own field_video_gallery',
    'view field_video_gallery',
  ));
}

/**
 * Enable search_api_override module to allow local Solr config overrides.
 */
function s4rs_update_7021() {
  module_enable(array('search_api_override'));
}
