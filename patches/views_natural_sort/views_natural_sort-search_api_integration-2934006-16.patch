diff --git a/includes/views_natural_sort_search_api_callback.inc b/includes/views_natural_sort_search_api_callback.inc
new file mode 100644
index 0000000..6bfd99f
--- /dev/null
+++ b/includes/views_natural_sort_search_api_callback.inc
@@ -0,0 +1,145 @@
+<?php
+
+/**
+ * @file
+ * Contains SearchApiAlterAddHierarchy.
+ */
+
+/**
+ * Add new field that contains value, that could be naturally sorted.
+ */
+class ViewsNaturalSortSearchApiCallback extends SearchApiAbstractAlterCallback {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function configurationForm() {
+    $form['#attached']['css'][] = drupal_get_path('module', 'search_api') . '/search_api.admin.css';
+
+    $fields = $this->index->getFields();
+    $field_options = array();
+    $default_fields = array();
+    if (isset($this->options['fields'])) {
+      $default_fields = drupal_map_assoc(array_keys($this->options['fields']));
+    }
+    foreach ($fields as $name => $field) {
+      if (strpos($name, 'sort_') !== false) {
+        continue;
+      }
+
+      $field_options[$name] = check_plain($field['name']);
+      if (!empty($default_fields[$name]) || (!isset($this->options['fields']) && $this->testField($name, $field))) {
+        $default_fields[$name] = $name;
+      }
+    }
+
+    $form['fields'] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Fields to run on'),
+      '#options' => $field_options,
+      '#default_value' => $default_fields,
+      '#attributes' => array('class' => array('search-api-checkboxes-list')),
+    );
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function configurationFormValidate(array $form, array &$values, array &$form_state) {
+    $fields = array_filter($values['fields']);
+    if ($fields) {
+      $fields = array_fill_keys($fields, TRUE);
+    }
+    $values['fields'] = $fields;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function configurationFormSubmit(array $form, array &$values, array &$form_state) {
+    $this->options = $values;
+    return $values;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function alterItems(array &$items) {
+    if (empty($this->options['fields'])) {
+      return;
+    }
+
+    foreach ($items as &$item) {
+      foreach ($this->options['fields'] as $field => $active) {
+        if (is_string($item->{$field})) {
+          $item->{'sort_' . $field} = views_natural_sort_transform(array(
+            'content' => $item->{$field}
+          ));
+        }
+        elseif (!empty($item->{$field}[$item->language][0]['value'])) {
+          $item->{'sort_' . $field} = views_natural_sort_transform(array(
+            'content' => $item->{$field}[$item->language][0]['value']
+          ));
+        }
+        else {
+          $item->{'sort_' . $field} = "";
+        }
+      }
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function propertyInfo() {
+    if (empty($this->options['fields'])) {
+      return array();
+    }
+
+    $properties = array();
+    $fields = $this->index->getFields();
+    foreach ($this->options['fields'] as $field => $active) {
+      $properties['sort_' . $field] = array(
+        'label' => t('Sort by !label', array('!label' => $fields[$field]['name'])),
+        'description' => t('Field processed by Views Natural Sort module for natural sorting.'),
+        'type' => 'string',
+      );
+    }
+
+    return $properties;
+  }
+
+  /**
+   * Determines whether to process data from the given field.
+   *
+   * @param $name
+   *   The field's machine name.
+   * @param array $field
+   *   The field's information.
+   *
+   * @return bool
+   *   TRUE, if the field should be processed, FALSE otherwise.
+   */
+  protected function testField($name, array $field) {
+    if (empty($this->options['fields'])) {
+      return $this->testType($field['type']);
+    }
+    return !empty($this->options['fields'][$name]);
+  }
+
+  /**
+   * Determines whether fields of the given type should normally be processed.
+   *
+   * Defaults to processing text types, but can easily be overridden by
+   * subclasses.
+   *
+   * @return bool
+   *   TRUE, if the type should be processed, FALSE otherwise.
+   */
+  protected function testType($type) {
+    return search_api_is_text_type($type, array('text', 'tokens'));
+  }
+
+}
diff --git a/views_natural_sort.info b/views_natural_sort.info
index 6cd9bbc..4762de9 100644
--- a/views_natural_sort.info
+++ b/views_natural_sort.info
@@ -9,3 +9,12 @@ core = 7.x
 ; Views handlers
 files[] = handlers/views_natural_sort_handler_sort.inc
 files[] = views_natural_sort.test
+
+; Search API integration
+files[] = includes/views_natural_sort_search_api_callback.inc
+
+; Information added by Drupal.org packaging script on 2019-08-18
+version = "7.x-2.6+5-dev"
+core = "7.x"
+project = "views_natural_sort"
+datestamp = "1566166985"
diff --git a/views_natural_sort.module b/views_natural_sort.module
index 6215f79..004d2f7 100644
--- a/views_natural_sort.module
+++ b/views_natural_sort.module
@@ -479,3 +479,16 @@ function views_natural_sort_entity_to_vns($entity, $entity_type, $field) {
     'content' => $entity->$field,
   );
 }
+
+/**
+ * Implements hook_search_api_alter_callback_info().
+ */
+function views_natural_sort_search_api_alter_callback_info() {
+  $callbacks['search_api_elasticsearch_natural_sort'] = array(
+    'name' => t('Natural Sort'),
+    'description' => t('Process data as it is done by Views Natural Sort.'),
+    'class' => 'ViewsNaturalSortSearchApiCallback',
+  );
+
+  return $callbacks;
+}
\ No newline at end of file
